remotes.txt
Created Thu Sep 24 10:56:30 AKDT 2015
Copyright (C) 2015 by Raymond E. Marcil <marcilr@gmail.com>


Remotes


To be able to collaborate on any Git project, you need to know how
to manage your remote repositories.  Remote repositories are versions
of your project that are hosted on the Internet or network somewhere.
You can have several of them, each of which generally is either
read-only or read/write for you.  Collaborating with others involves
managing these remote repositories and pushing and pulling data to
and from them when you need to share work.  Managing remote
repositories includes knowing how to add remote repositories,
remove remotes that are no longer valid, manage various remote
branches and define them as being tracked or not, and more.  In
this section, we'll cover some of these remote-management skills.

git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes


Adding a remote
===============
To add a new remote, use the git remote add command on the terminal,
in the directory your repository is stored at.

The git remote add command takes two arguments:

o A remote name, for example, origin
o A remote URL, for example, https://github.com/user/repo.git

help.github.com/articles/adding-a-remote/


To add a new remote Git repository as a shortname you can reference
easily, run git remote add [shortname] [url]:

$ git remote
origin
$ git remote add pb https://github.com/paulboone/ticgit
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
pb	https://github.com/paulboone/ticgit (fetch)
pb	https://github.com/paulboone/ticgit (push)

Now you can use the string pb on the command line in lieu of the
whole URL.  For example, if you want to fetch all the information
that Paul has but that you don't yet have in your repository,
you can run git fetch pb:

$ git fetch pb
remote: Counting objects: 43, done.
remote: Compressing objects: 100% (36/36), done.
remote: Total 43 (delta 10), reused 31 (delta 5)
Unpacking objects: 100% (43/43), done.
From https://github.com/paulboone/ticgit
 * [new branch]      master     -> pb/master
 * [new branch]      ticgit     -> pb/ticgit

Paul's master branch is now accessible locally as pb/master - you
can merge it into one of your branches, or you can check out a local
branch at that point if you want to inspect it. (We'll go over what
branches are and how to use them in much more detail in Git
Branching.)[1]

git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes


List remotes
============
To see which remote servers you have configured, you can run the git
remote command. It lists the shortnames of each remote handle you've
specified. If you've cloned your repository, you should at least see
origin - that is the default name Git gives to the server you cloned
from:

covellite:~/git$ git remote
origin

covellite:~/git$ git remote -v
origin  git@github.com:marcilr/git.git (fetch)
origin  git@github.com:marcilr/git.git (push)
covellite:~/git$ 

The -v options lists the repo urls.

git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes


Fetch from remote
=================
The command goes out to that remote project and pulls down all the
data from that remote project that you don't have yet. After you
do this, you should have references to all the branches from that
remote, which you can merge in or inspect at any time.

$ git fetch [remote-name]

If you clone a repository, the command automatically adds that
remote repository under the name "origin.  So, git fetch origin
fetches any new work that has been pushed to that server since
you cloned (or last fetched from) it.  It's important to note
that the git fetch command pulls the data to your local
repository - it doesn't automatically merge it with any of your
work or modify what you're currently working on.  You have to
merge it manually into your work when you're ready.

git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes


Pull from remote
================
If you have a branch set up to track a remote branch (see the
next section and Git Branching for more information), you can
use the git pull command to automatically fetch and then merge
a remote branch into your current branch. This may be an easier
or more comfortable workflow for you; and by default, the git
clone command automatically sets up your local master branch
to track the remote master branch (or whatever the default
branch is called) on the server you cloned from.  Running git
pull generally fetches data from the server you originally
cloned from and automatically tries to merge it into the code
you're currently working on.

git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes


Push to remote
==============
When you have your project at a point that you want to share,
you have to push it upstream.  The command for this is simple:
git push [remote-name] [branch-name].  If you want to push
your master branch to your origin server (again, cloning
generally sets up both of those names for you automatically),
then you can run this to push any commits you've done back
up to the server:

  $ git push origin master

This command works only if you cloned from a server to which
you have write access and if nobody has pushed in the meantime.
If you and someone else clone at the same time and they push
upstream and then you push upstream, your push will rightly be
rejected. You'll have to pull down their work first and
incorporate it into yours before you'll be allowed to push.
See Git Branching for more detailed information on how to push
to remote servers.

git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes


Inspect remote
==============
If you want to see more information about a particular remote, you can use the
git remote show [remote-name] command.  If you run this command with a
particular shortname, such as origin, you get something like this:

$ git remote show origin
* remote origin
  Fetch URL: https://github.com/schacon/ticgit
  Push  URL: https://github.com/schacon/ticgit
  HEAD branch: master
  Remote branches:
    master                               tracked
    dev-branch                           tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (up to date)

It lists the URL for the remote repository as well as the tracking branch
information.  The command helpfully tells you that if you're on the master
branch and you run git pull, it will automatically merge in the master branch
on the remote after it fetches all the remote references.  It also lists all
the remote references it has pulled down.

git-scm.com/book/en/v2/Git-Basics-Working-with-Remote


Removing and Renaming remotes
=============================
If you want to rename a reference you can run git remote rename to change a
remote's shortname.  For instance, if you want to rename pb to paul, you can
do so with git remote rename:

  $ git remote rename pb paul
  $ git remote
  origin
  paul

It's worth mentioning that this changes your remote branch names, too.  What
used to be referenced at pb/master is now at paul/master.

If you want to remove a remote for some reason - you've moved the server or
are no longer using a particular mirror, or perhaps a contributor isn't
contributing anymore - you can use git remote rm:

  $ git remote rm paul
  $ git remote
  origin

git-scm.com/book/en/v2/Git-Basics-Working-with-Remote



Links
=====
[1] Git Branching
https://git-scm.com/book/en/v1/Git-Branching

Adding a remote
https://help.github.com/articles/adding-a-remote/

git-remote - Manage set of tracked repositories
http://git-scm.com/docs/git-remote

Working with Remotes
Pro Git book
http://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes
