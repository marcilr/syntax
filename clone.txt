clone.txt
Created Mon May  4 15:44:19 AKDT 2015
Copyright (C) 2015 by Raymond E. Marcil <marcilr@gmail.com>


Clone repository


If you want to get a copy of an existing Git repository - for example, a project
you'd like to contribute to - the command you need is git clone . If you're
familiar with other VCS systems such as Subversion, you'll notice that the command
is "clone" and not "checkout".  This is an important distinction - instead
of getting just a working copy, Git receives a full copy of nearly all data that the
server has.




Options
=======
--bare     Treat the repository as a bare repository. If GIT_DIR environment
           is not set, it is set to the current working directory.
           Best I can tell eliminates the .git/ subdirectory and moves the
           files up to one directory to the root.

This properly clones the hellow-world/ repo with the .git subdirectory:

    $ git clone https://github.com/marcilr/hello-world.git
    $ git clone git@github.com:marcilr/hello-world.git
    $ git clone git@github.com:marcilr/git.git


Looks very straight forward:

A common transport protocol for Git when self-hosting is over SSH.  This is
because SSH access to servers is already set up in most places - and if it
isn't, it's easy to do.  SSH is also an authenticated network protocol; and
because it's ubiquitous, it's generally easy to set up and use.

To clone a Git repository over SSH, you can specify ssh:// URL like this:
  $ git clone ssh://user@server/project.git

Or you can use the shorter scp-like syntax for the SSH protocol:
  $ git clone user@server:project.git

git-scm.com/book/en/v2/Git-on-the-Server-The-Protocols


This creates a full copy of the data, but without a working directory for
editing files, and ensures a clean, fresh export of all the old data.

$ git clone --bare https://githost.org/extuser/repo.git
# Makes a bare clone of the external repository in a local directory

Clone without checking ssl certificate:
covellite:~$ export GIT_SSL_NO_VERIFY=1

Clone git repo from github:
covellite:~$ git clone --bare https://github.com/marcilr/git.git
Cloning into bare repository 'git.git'...
warning: You appear to have cloned an empty repository.
Checking connectivity... done.
covellite:~$ 



Wed Sep 23 14:30:37 AKDT 2015
=============================
Added github.com certificate authority to ca-certificates.crt to alleviate
github clone repo error:
  covellite:~$ git clone --bare https://githost.org/git.git
  Cloning into bare repository 'git.git'...
  fatal: unable to access 'https://githost.org/git.git/': \
    server certificate verification failed. CAfile: \
    /etc/ssl/certs/ca-certificates.crt CRLfile: none
  covellite:~$

1. Create /usr/share/ca-certificates/mozilla/github.crt file
with github certificate authority cert:

covellite:~$ echo -n | openssl s_client -showcerts \
-connect github.com:443 2>/dev/null | \
sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' \
> /usr/share/ca-certificates/mozilla/GitHub.crt 

2. Update the /etc/ca-certificates.conf certificate authority
mapping with github certificate authority cert:

covellite:~# cp /etc/ca-certificates.conf \
/etc/ca-certificates.conf-ORIG

covellite:~# nano /etc/ca-certificates.conf 
...
mozilla/GeoTrust_Universal_CA.crt
mozilla/GitHub.crt
mozilla/Global_Chambersign_Root_-_2008.crt
...

3. Run update-ca-certificates that updates the
/etc/ssl/certs/ca-certificates.crt file with all the certs
lists in /etc/ca-certificates.conf:

covellite:~# update-ca-certificates 
Updating certificates in /etc/ssl/certs... 1 added, 0 removed; done.
Running hooks in /etc/ca-certificates/update.d....
Adding debian:GitHub.pem
done.
done.
covellite:~#

4. Test with github git repo checkout:
covellite:~$ git clone --bare https://githost.org/git.git

covellite:~$ ssh-add ~/.ssh/id_rsa
Enter passphrase for /home/marcilr/.ssh/id_rsa: 
Identity added: /home/marcilr/.ssh/id_rsa (/home/marcilr/.ssh/id_rsa)
covellite:~$

covellite:~$ git clone --bare https://github.com/marcilr/git.git git
Cloning into bare repository 'git'...
warning: You appear to have cloned an empty repository.
Checking connectivity... done.
covellite:~$

  or

covellite:~$ git clone --bare git@github.com:marcilr/git.git git
Cloning into bare repository 'git'...
warning: You appear to have cloned an empty repository.
Checking connectivity... done.
covellite:~$

Like the latter as I think ssh is better than https.

Yeh hah, github clone filenally worked!

NOTE: Had to specify 'git' target to not get the default 'git.git'
      target.



Examples
========
You clone a repository with git clone [url] . For example, if you want to
clone the Git linkable library called libgit2, you can do so like this:
  $ git clone https://github.com/libgit2/libgit2

That creates a directory named "libgit2", initializes a .git directory inside it,
pulls down all the data for that repository, and checks out a working copy of the
latest version. If you go into the new libgit2 directory, you’ll see the project
files in there, ready to be worked on or used. If you want to clone the repository
into a directory named something other than “libgit2”, you can specify that as
the next command-line option:
  $ git clone https://github.com/libgit2/libgit2 mylibgit

That command does the same thing as the previous one, but the target di-
rectory is called mylibgit .

progit-en.478.pdf, Pro Git, p. 44


Examples
========
Clone github repository:

covellite:~/github$ git clone https://github.com/marcilr/gnano
Cloning into 'gnano'...
remote: Counting objects: 3, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
Unpacking objects: 100% (3/3), done.
Checking connectivity... done.
covellite:~/github$

Worked good.



The SSH Protocol
================
A common transport protocol for Git when self-hosting is over SSH.  This is
because SSH access to servers is already set up in most places - and if it
isn't, it's easy to do.  SSH is also an authenticated network protocol; and
because it's ubiquitous, it's generally easy to set up and use.

To clone a Git repository over SSH, you can specify ssh:// URL like this:
  $ git clone ssh://user@server/project.git

Or you can use the shorter scp-like syntax for the SSH protocol:
  $ git clone user@server:project.git

You can also not specify a user, and Git assumes the user you're currently
logged in as.

THE PROS
--------
The pros of using SSH are many. First, SSH is relatively easy to set up - SSH
daemons are commonplace, many network admins have experience with them,
and many OS distributions are set up with them or have tools to manage them.
Next, access over SSH is secure - all data transfer is encrypted and
authenticated.  Last, like the HTTP/S, Git and Local protocols, SSH is
efficient, making the data as compact as possible before transferring it.

THE CONS
--------
The negative aspect of SSH is that you can't serve anonymous access of your
repository over it.  People must have access to your machine over SSH to access
it, even in a read-only capacity, which doesn't make SSH access conducive to
open source projects. If you're using it only within your corporate network,
SSH may be the only protocol you need to deal with.  If you want to allow
anonymous read-only access to your projects and also want to use SSH, you'll
have to set up SSH for you to push over but something else for others to fetch
over.

progit-en.478.pdf, Pro Git, p. 50-51


Filelist
========
progit-en.478.pdf
  Getting Started - The Command Line
  Pointer to Pro Git, Everything you need to know about git
  by Scott Chacon and Ben Straub
  Apress
  http://git-scm.com/book/en/v2/Getting-Started-The-Command-Line
  https://progit2.s3.amazonaws.com/en/2015-05-02-7ddee/progit-en.478.pdf


Links
=====
[1] "SSL works with browser, wget, and curl, but fails with git"
http://stackoverflow.com/q/7814423/6309

[2] block post
http://blog.venthur.de/index.php/2012/08/usability-of-git-http-backend-with-self-signed-ssl-certificates/

[3] issue 4272
https://github.com/gitlabhq/gitlabhq/issues/4272

Git on the Server - The Protocols
https://git-scm.com/book/en/v2/Git-on-the-Server-The-Protocols

git-clone(1) Manual Page
https://www.kernel.org/pub/software/scm/git/docs/git-clone.html

server certificate verification failed. CAfile: /etc/ssl/certs/ca-certificates.crt CRLfile: none
http://stackoverflow.com/questions/21181231/server-certificate-verification-failed-cafile-etc-ssl-certs-ca-certificates-c
